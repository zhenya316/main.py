'''
класс — это наше представление данных, то есть собственный тип данных. У него есть свои характеристики и свои способности. В Python есть встроенные операторы,
которые используются по отношению к другим типам. Например, если брать числа, то используем оператор сложения — плюс, используем оператор вычитания — минус, деление,
умножение, сравнение больше, меньше, равно, не равно. Их на самом деле огромное количество.
Это поведение определено, заложено по отношению к стандартным типам. Но можно изменить поведение этих операторов по отношению к нашим объектам. Это и называется перегрузкой.
'''

class Human:
    def __init__(self, name, age):           # __init__ - метод который работает 1 раз нужен для инцилизация класса
        self.name = name                # self -
        self.age = age                  # атрибуты, переменные внутри класса, при создание передаём значение
        self.say_info()                 # вызвали метод внутри класса
    def say_info(self):
        print(f'Привет, меня зовут {self.name}, мне {self.age}')                # Метод, собственная структура данных, собственный тип, с собственными характеристиками и способностями

    def birthday(self):
        self.age += 1
        print(f'У меня день рождения, мне теперь {self.age}')

    def __str__(self):
        return f'{self.name}'           # строковое представляет нашего класса при вызове print
    def __len__(self):
        return self.age

    def __lt__(self, other):
        return self.age < other.age                 # оператор для сравнения если меньше, перезрузили оператор сравнения в свой класс
#other - второй элемент сравнения
    def __gt__(self, other):
        return self.age > other.age                 # оператор для сравнения если больше, перезрузили оператор сравнения в свой класс

    def __eq__(self, other):
        return self.name == other.name and self.name == other.name      # оператор для сравнения если переменные равны, перезрузили оператор сравнения в свой класс

    def __bool__(self):
        return bool(self.age)       # True - если не равен 0
    def __del__(self):
        print(f'{self.name} ушёл')


den = Human('Denis', 22)
max_ = Human('Max', 22)
max_.name = 'Denis'
print(den < max_)
print(den > max_)
max_.birthday()
print(den < max_)
print(den > max_)
print(den == max_)
a = 5
print(den)

'''
Классы позволяют очень гибко работать с логикой в нашей программе. Можно определять, как они будут вести себя, объекты нашего собственного типа данных, при сложении, вычитании, 
делении, умножении при переводе их в число, при попытке найти их модуль, при попытке сравнить или проверить является ли этот объект истинным или ложным. Вы никогда заранее не можете знать,
что вам пригодится при написании вашей программы.
К сожалению, не все описано уже в языке Python. Зачастую приходится использовать собственную сущность, создавать собственные представления. Изначально их тоже не было в Python, но 
библиотеки используют собственные сущности, определения своих типов данных. Они завязаны на использовании в какой-то мере каких-то стандартных элементов нашего языка. Однако все-таки они 
тоже являются собственным созданным типом данных.
Никто не может заранее сказать, какие технологии вам будет необходимо, скажем так, применять при реализации вашей какой-то идеи. Поэтому классы достаточно гибкий способ для того, 
чтобы организовать собственную структуру данных и очень доступно можно работать с этой структурой, определять поведение, как она себя будет вести в программе. Делать это таким образом, 
что если кто-то будет использовать вашу структуру данных, он тоже сможет взять и ознакомиться с содержимым. 
Человек, который смотрит,
в принципе, поймёт, как работает ваш собственный тип данных и что с ним можно делать. Поэтому классы очень важны и нужно просто тренироваться.
'''