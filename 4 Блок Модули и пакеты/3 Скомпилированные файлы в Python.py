#В этом «pycache» хранятся уже скомпилированные файлы, переведённые у нас в bytecode для ускорения работы. Таким образом, Рython облегчает себе задачу, то есть он не берет,
# не начинает заново все это дело обрабатывать, а уже использует готовый bytecode для выполнения, соответственно, нашей программы, тем самым ускоряя себе работу.
#Зачем ему это нужно и как это работает? Несмотря на то, что у нас Рython интерпретируемый язык программирования вообще, мы с вами пишем код на достаточно понятном языке,
# запускаем, получаем какой-то результат программы. Сам Рython не переводит язык в машинный код. Компьютер понимает только машинный язык свой, на котором он привык общаться,
# на котором мы пишем ему какие-то алгоритмы, инструкции и так далее. Но мы же с вами пишем какие-то более осмысленные слова, понятные. Если вы познакомитесь с понятием машинный код,
# вы сильно удивитесь, насколько он может быть непонятен. Чем ниже по уровню язык программирования, тем ближе он к машинному языку. Чем он выше, то есть,
# если вы слышали такое выражение Рython- это высокоуровневый язык программирования, это значит то, что он ближе к нашему человеческому восприятию. То есть мы пишем «print»,
# понимаем, что это что-то напечатать, «return»- что-то вернуть. Машинный код сильно у нас отличается.
#Но как работает Рython? Когда мы запускаем наш код, Рython интерпретатор сначала переводит весь код в bytecode. В этом ему помогает встроенный интерпретатор компилируемого типа
# «СPython». Это считается эталонным компилятором. Почему это интерпретатор компилируемого типа? Потому что он выполняет и компиляцию, и интерпретирует. По сути, у нас компилятор
# переводит код в bytecode, интерпретатор уже отвечает за выполнение этого кода на PVM. Это Python Virtual Machine. То есть, соответственно, виртуальная машина, которая непосредственно
# обрабатывает этот bytecode.